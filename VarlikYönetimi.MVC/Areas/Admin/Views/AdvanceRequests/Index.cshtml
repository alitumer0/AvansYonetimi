@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Avans Talepleri";
}

@model Dictionary<DateTime, List<VarlikYönetimi.Core.Entities.AdvanceRequest>>
@using VarlikYönetimi.Core.Enums
@using Microsoft.AspNetCore.Identity
@inject UserManager<VarlikYönetimi.Core.Entities.User> UserManager
@inject VarlikYönetimi.Services.Services.Interfaces.IAdvanceLimitService AdvanceLimitService

@{
    var currentUser = await UserManager.GetUserAsync(User);
    var userRoles = await UserManager.GetRolesAsync(currentUser);
    var isAdmin = userRoles.Contains("Admin");
    var currentUserRole = userRoles.FirstOrDefault();
    var currentApprovalLevel = Enum.TryParse<ApprovalLevel>(currentUserRole, out var level) ? level : ApprovalLevel.None;
}

@section Styles {
    <link rel="stylesheet" href="~/css/admin-advance.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
}

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">
            <i class="fas fa-money-bill-wave me-2"></i>Avans Talepleri
        </h2>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @foreach (var group in Model)
    {
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    <i class="fas fa-calendar-alt me-2"></i>@group.Key.ToString("dd MMMM yyyy")
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    @foreach (var item in group.Value)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100">
                                <div class="card-header bg-info text-white">
                                    <h6 class="mb-0">
                                        <i class="fas fa-user me-2"></i>@item.User?.FullName
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <p class="card-text">
                                        <strong>Tutar:</strong> @item.Amount.ToString("N2") TL<br>
                                        <strong>Durum:</strong> 
                                        @switch (item.Status)
                                        {
                                            case RequestStatus.Pending:
                                                <span class="badge bg-warning">Beklemede</span>
                                                break;
                                            case RequestStatus.Approved:
                                                <span class="badge bg-success">Onaylandı</span>
                                                break;
                                            case RequestStatus.Rejected:
                                                <span class="badge bg-danger">Reddedildi</span>
                                                break;
                                            default:
                                                <span class="badge bg-secondary">@item.Status</span>
                                                break;
                                        }
                                        <br>
                                        <strong>Tarih:</strong> @item.RequestDate.ToString("dd.MM.yyyy HH:mm")<br>
                                        <strong>Seviye:</strong> @item.CurrentLevel
                                        @if (item.Status == RequestStatus.Approved)
                                        {
                                            <br><strong>Onaylayan:</strong> @item.ApprovedBy
                                            <br><strong>Onay Tarihi:</strong> @item.ApprovedAt?.ToString("dd.MM.yyyy HH:mm")
                                        }
                                        @if (item.Status == RequestStatus.Rejected)
                                        {
                                            <br><strong>Reddeden:</strong> @item.RejectedBy
                                            <br><strong>Red Tarihi:</strong> @item.RejectedAt?.ToString("dd.MM.yyyy HH:mm")
                                            @if (!string.IsNullOrEmpty(item.RejectionReason))
                                            {
                                                <br><strong>Red Nedeni:</strong> @item.RejectionReason
                                            }
                                        }
                                    </p>
                                </div>
                                <div class="card-footer">
                                    <div class="btn-group">
                                        <a href="/Admin/AdvanceRequests/Details/@item.Id" class="btn btn-sm btn-primary">
                                            <i class="fas fa-eye"></i> Detaylar
                                        </a>
                                        @if (item.Status == RequestStatus.Pending)
                                        {
                                            <button type="button" class="btn btn-sm btn-success" onclick="showApproveModal(@item.Id)">
                                                <i class="fas fa-check"></i> Onayla
                                            </button>
                                            <button type="button" class="btn btn-sm btn-danger" onclick="showRejectModal(@item.Id)">
                                                <i class="fas fa-times"></i> Reddet
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i>Henüz avans talebi bulunmamaktadır.
        </div>
    }
</div>


<div class="modal fade" id="approveModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Avans Talebini Onayla</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-area="Admin" asp-controller="AdvanceRequests" asp-action="Approve" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" id="approveRequestId" name="id" />
                <div class="modal-body">
                    <div class="form-group">
                        <label>Notlar (Opsiyonel)</label>
                        <textarea name="notes" class="form-control" rows="3" placeholder="Not eklemek isterseniz yazabilirsiniz"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-check"></i> Onayla
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Reddetme Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Avans Talebini Reddet</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-area="Admin" asp-controller="AdvanceRequests" asp-action="Reject" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" id="rejectRequestId" name="id" />
                <div class="modal-body">
                    <div class="form-group">
                        <label>Red Nedeni (Opsiyonel)</label>
                        <textarea name="notes" class="form-control" rows="3" placeholder="Red nedenini belirtmek isterseniz yazabilirsiniz"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-times"></i> Reddet
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function showApproveModal(id) {
            document.getElementById('approveRequestId').value = id;
            var modal = new bootstrap.Modal(document.getElementById('approveModal'));
            modal.show();
        }

        function showRejectModal(id) {
            document.getElementById('rejectRequestId').value = id;
            var modal = new bootstrap.Modal(document.getElementById('rejectModal'));
            modal.show();
        }

        // Form submit işlemleri
        document.querySelectorAll('form').forEach(form => {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const formData = new FormData(form);
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                // Not alanı boşsa otomatik mesaj ekle
                const notes = formData.get('notes');
                if (!notes || notes.trim() === '') {
                    if (form.action.includes('Approve')) {
                        formData.set('notes', 'Avans talebi onaylanmıştır.');
                    } else if (form.action.includes('Reject')) {
                        formData.set('notes', 'Avans talebi reddedilmiştir.');
                    }
                }

                try {
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'RequestVerificationToken': token
                        }
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(errorText || `HTTP error! status: ${response.status}`);
                    }

                    // Modal'ı kapat
                    const modalElement = form.closest('.modal');
                    if (modalElement) {
                        const modal = bootstrap.Modal.getInstance(modalElement);
                        if (modal) {
                            modal.hide();
                        }
                    }

                    // Sayfayı yenile
                    window.location.reload();
                } catch (error) {
                    console.error('Hata:', error);
                    alert('İşlem sırasında bir hata oluştu. Lütfen tekrar deneyiniz.');
                }
            });
        });
    </script>
} 